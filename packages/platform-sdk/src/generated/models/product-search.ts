/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { ErrorObject, ErrorResponse } from './error'
import { ProductProjection } from './product'

export interface ProductPagedSearchResponse {
  /**
   *	Total number of results matching the query.
   *
   */
  readonly total: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset?: number
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit?: number
  /**
   *	Results of faceting.
   *
   */
  readonly facets?: ProductSearchFacetResult
  /**
   *	Actual results.
   *
   */
  readonly hits: ProductSearchHit[]
}
export type ProductSearchAttributeType =
  | 'boolean'
  | 'date'
  | 'datetime'
  | 'enum'
  | 'lenum'
  | 'ltext'
  | 'money'
  | 'number'
  | 'reference'
  | 'set_boolean'
  | 'set_date'
  | 'set_datetime'
  | 'set_enum'
  | 'set_lenum'
  | 'set_ltext'
  | 'set_money'
  | 'set_number'
  | 'set_reference'
  | 'set_text'
  | 'set_time'
  | 'text'
  | 'time'
  | string
export interface ProductSearchErrorResponse extends ErrorResponse {
  /**
   *	The http status code of the response.
   *
   */
  readonly statusCode: number
  /**
   *	Describes the error.
   *
   */
  readonly message: string
  /**
   *	The errors that caused this error response.
   *
   *
   */
  readonly errors?: ErrorObject[]
}
export interface ProductSearchHit {
  /**
   *	Unique identifier of the Product.
   *
   */
  readonly id: string
  /**
   *	Contains Product Projection data for Products matching the `projection` field in the Search Products request.
   *
   */
  readonly productProjection?: ProductProjection
  /**
   *	Contains a list of identifiers (id and SKU) of the matching variants.
   *
   */
  readonly matchingVariants?: ProductSearchMatchingVariant[]
}
export type ProductSearchMatchType = 'all' | 'any' | string
export interface ProductSearchMatchingVariant {
  /**
   *	Unique identifier of the variant.
   *
   */
  readonly id: number
  /**
   *	SKU of the matching variant.
   *
   */
  readonly sku?: string
}
export interface ProductSearchProjectionParams {
  /**
   *	Expands a `value` of type [Reference](ctp:api:type:Reference).
   *	In case the referenced object does not exist, the API returns the non-expanded reference.
   *
   *
   */
  readonly expand?: string
  /**
   *	Set to `true` to retrieve the [staged](ctp:api:type:CurrentStaged) Product Projection
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The currency used for [Price selection](/projects/products#price-selection).
   *
   *
   */
  readonly priceCurrency?: string
  /**
   *	The country used for [Price selection](/projects/products#price-selection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceCountry?: string
  /**
   *	`id` of an existing [CustomerGroup](ctp:api:type:CustomerGroup) used for [Price selection](ctp:api:type:ProductPriceSelection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceCustomerGroup?: string
  /**
   *	`id` of an existing [Channel](ctp:api:type:Channel) used for [Price selection](ctp:api:type:ProductPriceSelection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceChannel?: string
  /**
   *	Used for [locale-based projection](ctp:api:type:ProductProjectionLocales).
   *
   *
   */
  readonly localeProjection?: string[]
  /**
   *	`key` of an existing [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution or supply Channels,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *	If the Store has defined [Product Selections](ctp:api:type:ProductSelection), they have no effect on the results of this query.
   *
   *
   */
  readonly storeProjection?: string
}
export interface ProductSearchQuery {}
export type _ProductSearchQuery =
  | ProductSearchQuery
  | ProductSearchCompoundExpression
  | ProductSearchQueryExpression
export interface ProductSearchCompoundExpression extends ProductSearchQuery {}
export type _ProductSearchCompoundExpression =
  | ProductSearchCompoundExpression
  | ProductSearchAndExpression
  | ProductSearchFilterExpression
  | ProductSearchNotExpression
  | ProductSearchOrExpression
export interface ProductSearchAndExpression
  extends ProductSearchCompoundExpression {
  /**
   *
   */
  readonly and: ProductSearchQuery[]
}
export interface ProductSearchFilterExpression
  extends ProductSearchCompoundExpression {
  /**
   *
   */
  readonly filter: ProductSearchQueryExpression[]
}
export interface ProductSearchNotExpression
  extends ProductSearchCompoundExpression {
  /**
   *
   */
  readonly not: ProductSearchQuery[]
}
export interface ProductSearchOrExpression
  extends ProductSearchCompoundExpression {
  /**
   *
   */
  readonly or: ProductSearchQuery[]
}
export interface ProductSearchQueryExpression extends ProductSearchQuery {}
export type _ProductSearchQueryExpression =
  | ProductSearchQueryExpression
  | ProductSearchDateRangeExpression
  | ProductSearchDateTimeRangeExpression
  | ProductSearchExactExpression
  | ProductSearchExistsExpression
  | ProductSearchFullTextExpression
  | ProductSearchLongRangeExpression
  | ProductSearchNumberRangeExpression
  | ProductSearchPrefixExpression
  | ProductSearchTimeRangeExpression
  | ProductSearchWildCardExpression
export interface ProductSearchDateRangeExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly range: ProductSearchDateRangeValue
}
export interface ProductSearchDateTimeRangeExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly range: ProductSearchDateTimeRangeValue
}
export interface ProductSearchExactExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly exact: ProductSearchAnyValue
}
export interface ProductSearchExistsExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly exists: ProductSearchExistsValue
}
export interface ProductSearchFullTextExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly fullText: ProductSearchFullTextValue
}
export interface ProductSearchLongRangeExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly range: ProductSearchLongRangeValue
}
export interface ProductSearchNumberRangeExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly range: ProductSearchNumberRangeValue
}
export interface ProductSearchPrefixExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly prefix: ProductSearchAnyValue
}
export interface ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly field: string
  /**
   *
   */
  readonly boost?: number
  /**
   *
   */
  readonly attributeType?: ProductSearchAttributeType
}
export type _ProductSearchQueryExpressionValue =
  | ProductSearchQueryExpressionValue
  | ProductSearchAnyValue
  | ProductSearchDateRangeValue
  | ProductSearchDateTimeRangeValue
  | ProductSearchExistsValue
  | ProductSearchFullTextValue
  | ProductSearchLongRangeValue
  | ProductSearchNumberRangeValue
  | ProductSearchTimeRangeValue
export interface ProductSearchAnyValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly value: any
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly caseInsensitive?: boolean
}
export interface ProductSearchDateRangeValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: string
  /**
   *
   */
  readonly gt?: string
  /**
   *
   */
  readonly lte?: string
  /**
   *
   */
  readonly lt?: string
}
export interface ProductSearchDateTimeRangeValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: string
  /**
   *
   */
  readonly gt?: string
  /**
   *
   */
  readonly lte?: string
  /**
   *
   */
  readonly lt?: string
}
export interface ProductSearchExistsValue
  extends ProductSearchQueryExpressionValue {
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
}
export interface ProductSearchFullTextValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly value: any
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly mustMatch?: ProductSearchMatchType
}
export interface ProductSearchLongRangeValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: number
  /**
   *
   */
  readonly gt?: number
  /**
   *
   */
  readonly lte?: number
  /**
   *
   */
  readonly lt?: number
}
export interface ProductSearchNumberRangeValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: number
  /**
   *
   */
  readonly gt?: number
  /**
   *
   */
  readonly lte?: number
  /**
   *
   */
  readonly lt?: number
}
export interface ProductSearchRequest {
  /**
   *	The Product search query.
   *
   */
  readonly query?: _ProductSearchQuery
  /**
   *
   */
  readonly postFilter?: _ProductSearchQuery
  /**
   *	Controls how results to your query are sorted. If not provided, the results are sorted by relevance in descending order.
   *
   */
  readonly sort?: ProductSearchSorting[]
  /**
   *	The maximum number of search results to be returned.
   *
   */
  readonly limit?: number
  /**
   *	The number of search results to be skipped in the response for pagination.
   *
   */
  readonly offset?: number
  /**
   *	The search can return Products where not all Product Variants match the search criteria. If `true`, the response will include a field called `matchingVariants` that contains the `sku` of Product Variants that match the search query. If the query does not specify any variant-level criteria, `matchingVariants` will be null signifying that all Product Variants are a match.
   *
   */
  readonly markMatchingVariants?: boolean
  /**
   *	Contains Product Projection query parameters. Used to fetch matching Product Projection data of products matching the search query. If not included, Product Projection integration is not used.
   *
   */
  readonly projection?: ProductSearchProjectionParams
  /**
   *
   */
  readonly facets?: ProductSearchFacetExpression[]
}
export type ProductSearchSortMode = 'avg' | 'max' | 'min' | 'sum' | string
export type ProductSearchSortOrder = 'asc' | 'desc' | string
export interface ProductSearchSorting {
  /**
   *
   */
  readonly field: string
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly order: ProductSearchSortOrder
  /**
   *
   */
  readonly mode?: ProductSearchSortMode
  /**
   *
   */
  readonly attributeType?: ProductSearchAttributeType
  /**
   *
   */
  readonly filter?: _ProductSearchQueryExpression
  /**
   *
   */
  readonly internal?: boolean
}
export interface ProductSearchSuggestionExpression {}
export type _ProductSearchSuggestionExpression =
  | ProductSearchSuggestionExpression
  | ProductSearchSuggestionCompletionExpression
export interface ProductSearchSuggestionCompletionExpression
  extends ProductSearchSuggestionExpression {
  /**
   *
   */
  readonly completion: ProductSearchSuggestionCompletionExpressionValue
}
export interface ProductSearchSuggestionExpressionValue {}
export type _ProductSearchSuggestionExpressionValue =
  | ProductSearchSuggestionExpressionValue
  | ProductSearchSuggestionCompletionExpressionValue
export interface ProductSearchSuggestionCompletionExpressionValue
  extends ProductSearchSuggestionExpressionValue {
  /**
   *
   */
  readonly name: string
  /**
   *
   */
  readonly field: string
  /**
   *
   */
  readonly prefix: string
}
export interface ProductSearchTimeRangeExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly range: ProductSearchTimeRangeValue
}
export interface ProductSearchTimeRangeValue
  extends ProductSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: string
  /**
   *
   */
  readonly gt?: string
  /**
   *
   */
  readonly lte?: string
  /**
   *
   */
  readonly lt?: string
}
export interface ProductSearchWildCardExpression
  extends ProductSearchQueryExpression {
  /**
   *
   */
  readonly wildcard: ProductSearchAnyValue
}
export interface ProductSearchFacetCountValue {
  /**
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetEnumScope
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _ProductSearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly level?: ProductSearchFacetEnumCount
}
export type ProductSearchFacetDistinctBucketSortBy = 'count' | 'key' | string
export interface ProductSearchFacetDistinctBucketSortExpression {
  /**
   *	Defines whether to sort by bucket count or key.
   *
   */
  readonly by: ProductSearchFacetDistinctBucketSortBy
  /**
   *	Defines the sorting order.
   *
   */
  readonly order: ProductSearchSortOrder
}
export interface ProductSearchFacetDistinctStartsWith {
  /**
   *	Text to match against the start of the target value.
   *
   */
  readonly value: string
  /**
   *	If `true`, the `value` is not case sensitive.
   *
   */
  readonly caseInsensitive: boolean
}
export interface ProductSearchFacetDistinctValue {
  /**
   *	Name of the count facet.
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetEnumScope
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _ProductSearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly count?: ProductSearchFacetEnumCount
  /**
   *	The field to facet on. Can be any searchable field on the [Product](ctp:api:type:Product).
   *
   */
  readonly field: string
  /**
   *	Specify which bucket keys the facets results should include.
   *
   */
  readonly includes?: string[]
  /**
   *	Filter bucket keys in the facet results by the start of the key.
   *
   */
  readonly startsWith?: ProductSearchFacetDistinctStartsWith
  /**
   *	Define how the buckets are sorted.
   *
   */
  readonly sort?: ProductSearchFacetDistinctBucketSortExpression
  /**
   *	Maximum number of buckets to return.
   *
   */
  readonly size?: number
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *	If the `field` is an Attribute, this must be the Attribute type.
   *
   */
  readonly attributeType?: ProductSearchAttributeType
  /**
   *	Default value to use if the specified field is not present on some Products.
   *
   */
  readonly missing?: string
}
export type ProductSearchFacetEnumCount = 'products' | 'variants' | string
export type ProductSearchFacetEnumScope = 'all' | 'query' | string
export interface ProductSearchFacetExpression {}
export type _ProductSearchFacetExpression =
  | ProductSearchFacetExpression
  | ProductSearchFacetCountExpression
  | ProductSearchFacetDistinctExpression
  | ProductSearchFacetRangesExpression
export interface ProductSearchFacetCountExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the count facet.
   *
   */
  readonly count: ProductSearchFacetCountValue
}
export interface ProductSearchFacetDistinctExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the distinct facet.
   *
   */
  readonly distinct: ProductSearchFacetDistinctValue
}
export interface ProductSearchFacetRangesExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the ranges facet.
   *
   */
  readonly ranges: ProductSearchFacetRangesValue
}
/**
 *	Values for `from` and `to` must be a number or [DateTime](ctp:api:type:DateTime).
 */
export interface ProductSearchFacetRangesFacetRange {
  /**
   *	Starting value of the bucket (inclusive).
   *
   */
  readonly from?: any
  /**
   *	Ending value of the bucket (non-inclusive).
   *
   */
  readonly to?: any
  /**
   *	Key to assign the bucket.
   *
   */
  readonly key?: string
}
export interface ProductSearchFacetRangesValue {
  /**
   *	Name to assign the ranges facet.
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetEnumScope
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _ProductSearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly count?: ProductSearchFacetEnumCount
  /**
   *	The field to facet on. Can be any searchable field on the [Product](ctp:api:type:Product).
   *
   */
  readonly field: string
  /**
   *	Define ranges for the facet.
   *
   */
  readonly ranges: ProductSearchFacetRangesFacetRange[]
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *	If the `field` is an Attribute, this must be the Attribute type.
   *
   */
  readonly attributeType?: ProductSearchAttributeType
}
export interface ProductSearchFacetResult {
  /**
   *	Results of the facets.
   *
   */
  readonly results: ProductSearchFacetResultExpression[]
}
export interface ProductSearchFacetResultBucket {
  /**
   *	Key of the bucket.
   *
   */
  readonly key: string
  /**
   *	Number of values in the bucket.
   *
   */
  readonly count: number
}
export interface ProductSearchFacetResultExpression {
  /**
   *	Name of the facet.
   *
   */
  readonly name: string
}
export type _ProductSearchFacetResultExpression =
  | ProductSearchFacetResultExpression
  | ProductSearchFacetBucketResult
  | ProductSearchFacetResultCount
export interface ProductSearchFacetBucketResult
  extends ProductSearchFacetResultExpression {
  /**
   *	Contains results of the facet.
   *
   */
  readonly buckets: ProductSearchFacetResultBucket[]
}
export interface ProductSearchFacetResultCount
  extends ProductSearchFacetResultExpression {
  /**
   *	Number of Products (or Product Variants) matching the query.
   *
   */
  readonly value: number
}
export type ProductSearchFacetScope = 'all' | 'query' | string
